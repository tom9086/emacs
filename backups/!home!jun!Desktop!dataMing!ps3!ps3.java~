
//package dataming;
import java.util.Random;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;

class ps3 {

    public static void main (String[] args){
        
        File f1 =new File("C1.txt");
        File f2 =new File("C2.txt");
        File f3 =new File("C3.txt");
      
        Set<cluster> clusters= read(f1);
        // 1 represent min
        // 2 represnt max
        // 3 represent aveage

        Set<cluster> result=  diff(clusters,1);
        
        // for (cluster r :result)
        //     System.out.println("cluster size of each one: "+r.getPoints().size());
        // System.out.println("result size"+result.size());
        // System.out.println(result.toString());
        

        Set<point> points= readPoints(f1);
        point[] pArr = pointsToArray(points);
        Set<cluster> g = gonzalez(pArr, 3);
        
        System.out.println( g.toString());
        



        // k++
        point[] kppcenter= kpp(pArr,3);
        for (int i=0; i <kppcenter.length ; i++){ 
        System.out.println( kppcenter[i]);
        }
    }
    
    
    public static Set<cluster> kmean (point[] points, int k){
        point[] center = new point[k];
        point[] center2 = new point[k];
        int[] index= new int[] ;
        Set<cluster> c= new Set<cluster>():
        //initialize
        center[0]=point[0];
        center[1]=point[1];
        center[2]=point[2];
        while(true){
            for (int i=0; i <points.length ; i++){
                point p= point[i];
                double max=p.diff(center[0]);
                int indexp=0;
                for (int j=1; j <k ; i++){
                    if (p.diff(center[i])<min){
                        indexp = j;
                            }
                    index[i]= indexp;                    
                } 
            
            } 

            boolean converge= false;
            for (int i=0; i <k ; i++){
                double x= 0;
                double y= 0;
                int counter=0;
                for (int j=0; j<points.length ; j++){ 
                    if (i==index[j])
                        {
                            counter++;
                            x+=point[j].x;
                            y+=point[j].y;                            
                        }
                }
                center[i]= new point(1,x/counter,y/counter);
                if (!center[i].equals(center2[i])){
                    converge=true;
                }
                    
            } 
            if (converge){
                break;
            }

        } 





        Set<cluster> cs= new HashSet<cluster>();
        for (int i=0; i < k ; i++){ 
            cluster c= new cluster(center[i]);
            for (int j=0; j < size ; j++){
                if (index[j]==i)
                    c.add(points[j]);
            } 
            cs.add(c);
        } 



        return c;
    }




    public static point[] kpp (point[] points, int k){

        int size= points.length;
        point[] centers = new point[k];
        boolean[] boolc= new boolean[size];
        double[] dArray = new double[size];
        int[] ids = new int[size];
        centers[0]=points[0];
         point center = points[0];

        for (int i=1; i <k ; i++){ 
        

            int id=0;
            double sum=0;
            for (int j=0; j < size;  j++){
                if (!boolc[j]){
                    double distance=points[j].diff(centers[ids[j]]);
                    distance = Math.pow(distance,2);
                    dArray[j] = distance;
                    sum+=distance;
                }
            }

            
            //distance 

            Random random = new Random();
            double u=random.nextDouble();
            for (int j=0; j < size;  j++){
                double r= dArray[j]/sum;
                if (u <r){
                    centers[i]= points[j];
                    
                    boolc[id]=true;
                    id=j;
                    dArray[j]=0;
                }
                else
                    u=u-r;
                
            }
            


            

            for (int j=0; j <size ; j++){ 
                if (points[j].diff(points[ids[j]]) > centers[i].diff(points[j])){
                    ids[j] = i;
                    
                }
            } 
            
            
            
            
            
        } 
   

        return centers;


    
        

    }


    public static Set<cluster> gonzalez(point[] points, int k){
        int size= points.length;
        point[] centers = new point[k];
        boolean[] boolc= new boolean[size];
        int[] ids = new int[size];
        centers[0]=points[0];
        for (int i=1; i <k ; i++){ 
            double m= 0;
            point center = points[0];
            int id=0;
            for (int j=0; j < size;  j++){
                if (!boolc[j]){
                    double distance=points[j].diff(centers[ids[j]]);
                    if (distance  >m ){
                        m=distance; 
                        center=points[j];
                        id =j;
                    
                    }
                }
            }
            centers[i]= center;
            boolc[id]=true;
            for (int j=0; j <size ; j++){ 
                if (points[j].diff(points[ids[j]]) > centers[i].diff(points[j])){
                    ids[j] = i;
                    
                }
            } 
            
        } 
        
        
        Set<cluster> cs= new HashSet<cluster>();
        for (int i=0; i < k ; i++){ 
            cluster c= new cluster(centers[i]);
            for (int j=0; j < size ; j++){
                if (ids[j]==i)
                    c.add(points[j]);
            } 
            cs.add(c);
        } 

        return cs;
    }
    public static Set<cluster> diff(Set<cluster> clusters, int mode){
        int size= clusters.size();
        for (int k=0; k<size-4 ; k++){
            double min= Double.MAX_VALUE;
     
            cluster[] c=toArray( clusters);

            cluster mina= null;
            cluster minb= null;
            int mini= 0; 
            int minj=0;
            for (int i=0; i < c.length; i++){            
                cluster ci = c[i];
                for (int j=i+1; j <c.length ; j++){ 
                    cluster cj=c[j];
                    double r =cj.diff(ci,mode);
                    if (r<min)
                        {
                            mina=ci;
                            minb=cj;
                            min=r;  
                     
                        }
                    
                }
            }
    
        
            mina.addCluster(minb);
            clusters.remove(minb);
            //            System.out.println("cluster size"+ clusters.size());

         
     

  
        }
        return clusters;
    }
    public static cluster[] toArray(Set<cluster> clusters){
        cluster[] c= new cluster[clusters.size()];
        int counter =0;
        for (cluster ci  : clusters)
            c[counter++]=ci;
        return c;
    }

    public static point[] pointsToArray(Set<point> points){
        point[] p = new point[points.size()];
        
        int counter =0;
        for (point ps  : points)
            p[counter++]=ps;
        return p;
    }


    public static Set<cluster> read(File f){
        
        Set<cluster> clusters= new HashSet<cluster>();
        Scanner scan = null;
        try {
            scan = new Scanner(f);
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        while (scan.hasNextLine()){
            String line = scan.nextLine();
            String[] tokens = line.split("\\s+");
            //System.out.println(line);
            int id= Integer.parseInt(tokens[0]);
            double x =Double.parseDouble(tokens[1]);
            double y= Double.parseDouble(tokens[2]);
            //System.out.println(tokens[0]+" "+tokens[1]+" "+tokens[2]);
            point p= new point(id,x, y);



            cluster c= new cluster(p);
            clusters.add(c);
        }
        return clusters;
    } 
      public static Set<point> readPoints(File f){
        
        Set<point> clusters= new HashSet<point>();
        Scanner scan = null;
        try {
            scan = new Scanner(f);
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        while (scan.hasNextLine()){
            String line = scan.nextLine();
            String[] tokens = line.split("\\s+");
            //System.out.println(line);
            int id= Integer.parseInt(tokens[0]);
            double x =Double.parseDouble(tokens[1]);
            double y= Double.parseDouble(tokens[2]);
            //System.out.println(tokens[0]+" "+tokens[1]+" "+tokens[2]);
            point p= new point(id,x, y);




            clusters.add(p);
        }
        return clusters;
    }
}
class point{
    public double x;
    public double y;
    public int id;
    public point(int _id, double _x,double _y){
        id= _id;
        x=_x;
        y=_y; 
    }
    double diff(point k){
        return Math.sqrt(Math.pow(x-k.x,2)+Math.pow(y-k.y,2));
    }
    public String toString(){
        return "index: "+id+"  x:"+x +" y:"+y;
    }
    double distance(){
        return Math.sqrt(Math.pow(x,2)+Math.pow(y,2));
    }
}
class cluster{
    Set<point> points;
    public cluster(point p){
        points =new HashSet<point>();
        points.add(p);
    }
    public cluster(){
        points =new HashSet<point>();

    }

    void add(point a){
        points.add(a);
    }
    
    public String toString(){
        return "cluster: "+points.toString()+"\n";
    }
    public double diff(cluster c,int mode){
        
        double min= Double.MAX_VALUE;
        double max= Double.MIN_VALUE;
            double suma =0;
            double sumb =0;
       
        Iterator<point> iter= points.iterator();
        Iterator<point> iterb= c.getPoints().iterator();
       
        if (mode ==1||mode ==2){
        while(iter.hasNext()){
            point p=iter.next();
            while(iterb.hasNext()){
                point p1=iterb.next();
                double twoDiff=p1.diff(p);
                switch (mode){
                case 1:
                    if (twoDiff<min)
                        min=twoDiff;
                    break;
                case 2: 
                     if (twoDiff>max)
                         max=twoDiff;
                     break;
                 }}
        }
        }
        else {
         while(iter.hasNext()){
            suma += iter.next().distance();
        }
        while(iterb.hasNext()){
            sumb += iterb.next().distance();
        }
        suma=suma/points.size();
        sumb=sumb/c.getPoints().size();
        
        }
        if (mode==2)
            min=max;
        if (mode==3)
            min=Math.abs(suma-sumb);
        return min;


    }
    public Set<point>  getPoints(){
        return points;
    }
    public void addCluster(cluster  c){
        Iterator<point> iter= c.getPoints().iterator();
        while(iter.hasNext()){
            point p = iter.next();
            points.add(p); 


        }
     
         }
    public int size(){
        return points.size();
    }
    
}
